def decoder_2to4(A, B):
    """
    2-to-4 Decoder: Takes 2 binary inputs and activates one of 4 outputs.

    :param A: First binary input (0 or 1)
    :param B: Second binary input (0 or 1)
    :return: A list of 4 outputs where one is set to 1 and the rest to 0
    """
    # Ensure inputs are valid binary digits
    if A not in (0, 1) or B not in (0, 1):
        raise ValueError("Inputs must be binary (0 or 1).")

    # Output logic for 2-to-4 decoder
    outputs = [0] * 4  # Initialize all outputs to 0
    index = (A << 1) | B  # Calculate the output index using binary inputs
    outputs[index] = 1    # Activate the corresponding output
    return outputs

# Example usage
try:
    A = int(input("Enter the first input (0 or 1): "))
    B = int(input("Enter the second input (0 or 1): "))

    outputs = decoder_2to4(A, B)
    print(f"Decoder Outputs: {outputs}")
except ValueError as e:
    print(e)

'''
A decoder in digital electronics is a combinational circuit that converts binary input data into a specific output line. 
For example, a 2-to-4 decoder takes 2 binary inputs and activates one of the 4 output lines based on the input combination
'''

'''
Here's a line-by-line breakdown of the decoder_2to4 function in Python:

def decoder_2to4(A, B):
Defines the function decoder_2to4, which takes two binary inputs, A and B.

"""
Starts the docstring that explains the function's purpose.

2-to-4 Decoder: Takes 2 binary inputs and activates one of 4 outputs.
Describes the purpose of the function: it takes two binary inputs and activates one of four outputs.

:param A: First binary input (0 or 1)
Describes parameter A as the first binary input (either 0 or 1).

:param B: Second binary input (0 or 1)
Describes parameter B as the second binary input (either 0 or 1).

:return: A list of 4 outputs where one is set to 1 and the rest to 0
Specifies that the function returns a list of four binary outputs where one element is set to 1 and the rest are set to 0.

if A not in (0, 1) or B not in (0, 1):
Checks if either A or B is not a valid binary digit (0 or 1).

raise ValueError("Inputs must be binary (0 or 1).")
If the inputs are not valid binary digits, it raises a ValueError with an appropriate message.

outputs = [0] * 4
Initializes a list outputs with four elements, all set to 0. This represents the four output lines of the decoder, all initially inactive.

index = (A << 1) | B
Calculates the output index using bitwise operations:
A << 1 shifts the value of A by 1 bit to the left, making it either 0 or 2.
| B performs a bitwise OR operation with B (which is either 0 or 1).
This creates an index from the binary combination of A and B. For example, if A = 0 and B = 1, the result would be 01, or index 1.

outputs[index] = 1
Activates the corresponding output by setting the index position in the outputs list to 1.

return outputs
Returns the outputs list, which contains four elements, one of which is 1, and the others are 0, based on the input combination.

try:
Begins a try block to catch potential exceptions when calling the decoder_2to4 function.

A = int(input("Enter the first input (0 or 1): "))
Prompts the user to input the first binary value, converts it to an integer, and stores it in the variable A.

B = int(input("Enter the second input (0 or 1): "))
Prompts the user to input the second binary value, converts it to an integer, and stores it in the variable B.

outputs = decoder_2to4(A, B)
Calls the decoder_2to4 function with the user inputs A and B, and stores the returned list in outputs.

print(f"Decoder Outputs: {outputs}")
Prints the list of outputs generated by the decoder.

except ValueError as e:
Catches any ValueError raised by invalid inputs (e.g., non-binary values).

print(e)
Prints the error message associated with the ValueError exception.
'''