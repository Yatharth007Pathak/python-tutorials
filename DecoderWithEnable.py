def decoder_with_enable(A, B, Enable):
    """
    2-to-4 Decoder with Enable: Takes 2 binary inputs and an enable signal.
    
    :param A: First binary input (0 or 1)
    :param B: Second binary input (0 or 1)
    :param Enable: Enable signal (0 or 1)
    :return: A list of 4 outputs, activated only when Enable = 1
    """
    # Ensure inputs are valid binary digits
    if A not in (0, 1) or B not in (0, 1) or Enable not in (0, 1):
        raise ValueError("Inputs and Enable must be binary (0 or 1).")

    # Output logic for 2-to-4 decoder with enable
    if Enable == 1:
        outputs = [0] * 4  # Initialize all outputs to 0
        index = (A << 1) | B  # Calculate the output index using binary inputs
        outputs[index] = 1    # Activate the corresponding output
    else:
        outputs = [0, 0, 0, 0]  # All outputs are 0 when Enable is 0

    return outputs

# Example usage
try:
    A = int(input("Enter the first input (0 or 1): "))
    B = int(input("Enter the second input (0 or 1): "))
    Enable = int(input("Enter the Enable signal (0 or 1): "))

    outputs = decoder_with_enable(A, B, Enable)
    print(f"Decoder Outputs: {outputs}")
except ValueError as e:
    print(e)

'''
A decoder with enable in digital electronics functions like a standard decoder but includes an enable signal. 
The decoder activates its output lines only when the enable signal is set to 1. Otherwise, all outputs are set to 0.
'''

'''
Here's a line-by-line breakdown of the decoder_with_enable function in Python:

def decoder_with_enable(A, B, Enable):
Defines the function decoder_with_enable, which takes two binary inputs, A and B, and an enable signal Enable.

"""
Starts the docstring that describes the function.

2-to-4 Decoder with Enable: Takes 2 binary inputs and an enable signal.
Describes the purpose of the function: it is a 2-to-4 decoder that uses an enable signal.

:param A: First binary input (0 or 1)
Describes parameter A as the first binary input (either 0 or 1).

:param B: Second binary input (0 or 1)
Describes parameter B as the second binary input (either 0 or 1).

:param Enable: Enable signal (0 or 1)
Describes the Enable parameter, which controls whether the decoder should be active (1) or not (0).

:return: A list of 4 outputs, activated only when Enable = 1
Specifies that the function returns a list of four binary outputs, activated only if Enable is set to 1.

if A not in (0, 1) or B not in (0, 1) or Enable not in (0, 1):
Checks if A, B, or Enable are not valid binary digits (0 or 1).

raise ValueError("Inputs and Enable must be binary (0 or 1).")
If any of the inputs or the enable signal is invalid, it raises a ValueError with a specific message.

if Enable == 1:
Checks if the Enable signal is 1. If it is, the decoder will produce outputs based on the inputs.

outputs = [0] * 4
Initializes a list outputs with four elements, all set to 0. This represents the four output lines of the decoder, all initially inactive.

index = (A << 1) | B
Calculates the output index using bitwise operations:
A << 1 shifts the value of A by 1 bit to the left, making it either 0 or 2.
| B performs a bitwise OR operation with B (which is either 0 or 1).
This creates an index from the binary combination of A and B. For example, if A = 0 and B = 1, the result would be 01, or index 1.

outputs[index] = 1
Activates the corresponding output by setting the index position in the outputs list to 1.

else:
If the Enable signal is 0, all outputs should be inactive.

outputs = [0, 0, 0, 0]
Sets all outputs to 0 when Enable is 0, effectively disabling the decoder.

return outputs
Returns the outputs list, which contains four elements. One of them will be 1 if Enable = 1, and all will be 0 if Enable = 0.

try:
Begins a try block to catch potential exceptions when calling the decoder_with_enable function.

A = int(input("Enter the first input (0 or 1): "))
Prompts the user to input the first binary value, converts it to an integer, and stores it in the variable A.

B = int(input("Enter the second input (0 or 1): "))
Prompts the user to input the second binary value, converts it to an integer, and stores it in the variable B.

Enable = int(input("Enter the Enable signal (0 or 1): "))
Prompts the user to input the enable signal, converts it to an integer, and stores it in the variable Enable.

outputs = decoder_with_enable(A, B, Enable)
Calls the decoder_with_enable function with the user inputs A, B, and Enable, and stores the returned list in outputs.

print(f"Decoder Outputs: {outputs}")
Prints the list of outputs generated by the decoder.

except ValueError as e:
Catches any ValueError raised by invalid inputs (e.g., non-binary values).

print(e)
Prints the error message associated with the ValueError exception.
'''